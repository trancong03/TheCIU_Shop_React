# Generated by Django 5.0.9 on 2024-12-02 07:18

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('username', models.CharField(max_length=150, primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=255)),
                ('status', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('birthday', models.DateField()),
                ('address', models.TextField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10, null=True)),
                ('avatar', models.URLField(blank=True, null=True)),
                ('background', models.URLField(blank=True, null=True)),
            ],
            options={
                'db_table': 'account',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('variant_id', models.IntegerField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255)),
                ('quantity', models.IntegerField()),
            ],
            options={
                'db_table': 'Cart',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False)),
                ('category_name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('color_id', models.AutoField(primary_key=True, serialize=False)),
                ('color_name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'db_table': 'colors',
            },
        ),
        migrations.CreateModel(
            name='GroupUser',
            fields=[
                ('idGroup', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('note', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'groupusers',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('url', models.URLField(primary_key=True, serialize=False)),
                ('product_id', models.IntegerField()),
            ],
            options={
                'db_table': 'image',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.AutoField(primary_key=True, serialize=False)),
                ('product_name', models.CharField(max_length=255)),
                ('title', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('category_id', models.TextField(blank=True, null=True)),
                ('imageSP', models.URLField(blank=True, null=True)),
                ('rating', models.FloatField(default=0)),
                ('dateadd', models.DateField(auto_now_add=True)),
            ],
            options={
                'db_table': 'products',
            },
        ),
        migrations.CreateModel(
            name='Screen',
            fields=[
                ('idScreen', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'screen',
            },
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('size_id', models.AutoField(primary_key=True, serialize=False)),
                ('size_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'db_table': 'sizes',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.AutoField(primary_key=True, serialize=False)),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(max_length=50)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('voucher_id', models.IntegerField(blank=True, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.account')),
            ],
            options={
                'db_table': 'orders',
            },
        ),
        migrations.CreateModel(
            name='OrderDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.IntegerField()),
                ('variant_id', models.IntegerField()),
                ('quantity', models.IntegerField()),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'orderdetails',
                'unique_together': {('order_id', 'variant_id')},
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('variant_id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.IntegerField()),
                ('size_id', models.IntegerField()),
                ('color_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.color')),
                ('product_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.product')),
            ],
            options={
                'db_table': 'ProductVariants',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_id', models.IntegerField()),
                ('rating', models.IntegerField()),
                ('description', models.TextField()),
                ('dateFB', models.DateTimeField(auto_now_add=True)),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.account')),
            ],
            options={
                'db_table': 'feedback',
                'unique_together': {('product_id', 'username')},
            },
        ),
        migrations.CreateModel(
            name='QLPhanQuyen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idScreen', models.IntegerField()),
                ('status', models.BooleanField(default=True)),
                ('idGroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.groupuser')),
            ],
            options={
                'db_table': 'qlphanquyen',
                'unique_together': {('idGroup', 'idScreen')},
            },
        ),
        migrations.CreateModel(
            name='UserGroupUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idGroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.groupuser')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.account')),
            ],
            options={
                'db_table': 'user_groupuser',
                'unique_together': {('username', 'idGroup')},
            },
        ),
    ]
